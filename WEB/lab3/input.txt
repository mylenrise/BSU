Инструкция nonlocal В предыдущем разделе мы узнали, что вложенная функция может получать значения переменных в области видимости объемлющей функции даже после того, как эта функция вернет управление. Оказывается, в Python 3.0 также имеется возможность изменять значения переменных в области видимости объемлющей функции – при условии, что они объявлены с помощью инструкции nonlocal. Эта инструкция позволяет вложенным функциям не только читать, но и изменять значения переменных в областях видимости объемлющих функций. Инструкция nonlocal – близкий родственник инструкции global, описанной выше. Подобно инструкции global, nonlocal объявляет имена, которые будут изменяться в теле функции и которые находятся в объемлющей области видимости. Однако, в отличие от инструкции global, nonlocal применяется только к областям видимости объемлющих функций и не затрагивает глобальную область видимости модуля. Кроме того, в отличие от инструкции global, имена, перечисленные в инструкции nonlocal, должны фактически существовать в области видимости, вмещающей функцию, где встречается это объявление, – они могут существовать только в объемлющей области видимости и не могут быть созданы первой инструкцией присваивания во вложенной функции. Другими словами, инструкция nonlocal позволяет присваивать значения переменным в объемлющих областях видимости и ограничивает поиск таких имен областями видимости объемлющих функций. В результате мы получаем более очевидный и более надежный инструмент реализации изменения информации в областях видимости для программ, где нежелательно или невозможно использовать для этих же целей классы с атрибутами. Основы использования инструкции nonlocal В версии Python 3.0 появилась новая инструкция nonlocal, которая приобретает смысл только внутри функций:
def func():    nonlocal name1, name2, ... Эта инструкция позволяет вложенным функциям изменять переменные, которые определены в областях видимости синтаксически объемлющих функций. В Python 2.X (включая 2.6), когда одна функция объявляется внутри другой, 
Инструкция nonlocal 495
вложенная функция может читать значения любых имен, которые были определены с помощью инструкции присваивания в области видимости объемлющей функции, но она не может изменять их. В 3.0 объявление имен, находящихся в объемлющей области видимости, в инструкции nonlocal дает вложенной функции возможность присваивать им новые значения. Благодаря этому для вложенных функций обеспечивается возможность поддерживать доступную?для?изменения информацию о состоянии, которая восстанавливается при последующих вызовах вложенной функции. Способность изменять информацию о состоянии увеличивает практическую ценность вложенных функций (например, представьте, что в объемлющей области видимости хранится счетчик). В Python 2.X для достижения аналогичного эффекта обычно используются классы или другие инструменты. Применение вложенных функций стало практически стандартным приемом, когда требуется обеспечить сохранение состояния, при этом инструкция nonlocal еще больше расширяет область их применения. Кроме того, что инструкция nonlocal позволяет изменять значения переменных в объемлющих функциях, она также ограничивает область поиска имен – подобно инструкции global, инструкция nonlocal вынуждает интерпретатор начинать поиск с областей видимости объемлющих функций, пропуская локальную область видимости функции. То есть, кроме всего прочего, инструкция nonlocal означает: «пропустить локальную область видимости при поиске имен». На практике имена, перечисленные в инструкции nonlocal, должны быть определены в объемлющих функциях к моменту, когда поток управления достигнет инструкции nonlocal? в противном случае будет возбуждено исключение. По своему действию инструкция nonlocal близко напоминает global: объявление global означает, что имена находятся в глобальной области видимости вмещающего модуля, а объявление nonlocal означает, что они находятся в области видимости вмещающих функций. Впрочем, инструкция nonlocal даже более строгая – она ограничивает область поиска только областями видимости объемлющих функций. То есть нелокальные имена могут присутствовать только в областях видимости объемлющих функций. Кроме того, инструкция nonlocal вообще не вносит никаких изменений в правило поиска имен – поиск будет выполняться в полном соответствии с правилом «LEGB», описанным выше. Основное назначение инструкции nonlocal состоит в том, чтобы обеспечить возможность не только получения, но и изменения значений переменных в объемлющих областях видимости. Однако, если быть более точными, инструкции global и nonlocal несколько ограничивают правила поиска: • global вынуждает интерпретатор начинать поиск имен с области объемлющего модуля и позволяет присваивать переменным новые значения. Область поиска простирается вплоть до встроенной области видимости, если искомое имя не будет найдено в модуле, при этом операция присваивания значений глобальным именам всегда будет создавать или изменять переменные в области видимости модуля. • nonlocal ограничивает область поиска областями видимости объемлющих функций? она требует, чтобы перечисленные в инструкции имена уже существовали, и позволяет присваивать им новые значения. В область поиска не входят глобальная и встроенная области видимости.
496 Глава 17. Области видимости 
В Python 2.6 допускается ссылаться на имена в областях видимости объемPython 2.6 допускается ссылаться на имена в областях видимости объем 2.6 допускается ссылаться на имена в областях видимости объемлющих функций, но присвоить им новые значения невозможно. При этом для сохранения информации о состоянии и достижения того же эффекта, который дает применение инструкции nonlocal, вы можете использовать классы с атрибутами (что в некоторых случаях является даже более удачным решением). Иногда для аналогичных целей можно также использовать глобальные переменные и атрибуты функций. Подробнее об этом мы поговорим чуть ниже, а пока обратимся к программному коду, чтобы конкретизировать все вышесказанное. 